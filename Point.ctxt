#BlueJ class context
comment0.target=Point
comment0.text=\r\n\ The\ Point\ class\ represents\ a\ point\ in\ a\ 2D\ coordinate\ system\ with\ non-negative\ coordinates.\r\n\ This\ class\ provides\ functionality\ for\ creating,\ manipulating,\ and\ comparing\ points\ in\r\n\ a\ two-dimensional\ space.\ All\ coordinates\ are\ restricted\ to\ non-negative\ values.\r\n\ \r\n\ The\ class\ includes\ methods\ for\:\r\n\ -\ Creating\ points\ with\ specific\ coordinates\r\n\ -\ Comparing\ positions\ of\ points\ (above,\ below,\ left,\ right)\r\n\ -\ Calculating\ distances\ and\ midpoints\r\n\ -\ Moving\ points\ in\ the\ coordinate\ system\r\n\ -\ String\ representation\ of\ points\r\n\ \r\n\ All\ coordinates\ are\ maintained\ as\ non-negative\ integers.\ Any\ attempt\ to\ set\r\n\ negative\ coordinates\ (either\ through\ construction\ or\ mutation)\ will\ result\r\n\ in\ the\ coordinates\ being\ set\ to\ 0\ or\ the\ operation\ being\ ignored.\r\n\ \r\n\ @author\ Shimon\ Esterkin\ (SemionVlad)\r\n\ @version\ 2023B\r\n
comment1.params=x\ y
comment1.target=Point(int,\ int)
comment1.text=\r\n\ Constructs\ a\ new\ Point\ with\ specified\ coordinates.\r\n\ If\ negative\ coordinates\ are\ provided,\ they\ are\ set\ to\ 0.\r\n\r\n\ @param\ _x\ the\ x-coordinate\r\n\ @param\ _y\ the\ y-coordinate\r\n
comment10.params=other
comment10.target=boolean\ isLeft(Point)
comment10.text=\r\n\ Checks\ if\ this\ point\ is\ to\ the\ left\ of\ another\ point.\r\n\r\n\ @param\ other\ the\ point\ to\ compare\ with\r\n\ @return\ true\ if\ this\ point\ is\ left\ of\ the\ other\ point\r\n
comment11.params=other
comment11.target=boolean\ isRight(Point)
comment11.text=\r\n\ Checks\ if\ this\ point\ is\ to\ the\ right\ of\ another\ point.\r\n\r\n\ @param\ other\ the\ point\ to\ compare\ with\r\n\ @return\ true\ if\ this\ point\ is\ right\ of\ the\ other\ point\r\n
comment12.params=
comment12.target=java.lang.String\ toString()
comment12.text=\r\n\ Returns\ a\ string\ representation\ of\ the\ point\ in\ the\ format\ "(x,y)".\r\n\r\n\ @return\ formatted\ string\ representation\ of\ the\ point\r\n
comment13.params=deltaX\ deltaY
comment13.target=void\ move(int,\ int)
comment13.text=\r\n\ Moves\ the\ point\ by\ the\ specified\ deltas\ if\ the\ resulting\ position\ would\ remain\ non-negative.\r\n\r\n\ @param\ deltaX\ the\ change\ in\ x-coordinate\r\n\ @param\ deltaY\ the\ change\ in\ y-coordinate\r\n
comment14.params=p
comment14.target=Point\ middle(Point)
comment14.text=\r\n\ Calculates\ the\ midpoint\ between\ this\ point\ and\ another\ point.\r\n\r\n\ @param\ p\ the\ other\ point\r\n\ @return\ a\ new\ Point\ representing\ the\ midpoint\r\n
comment15.params=p
comment15.target=double\ distance(Point)
comment15.text=\r\n\ Calculates\ the\ Euclidean\ distance\ between\ this\ point\ and\ another\ point.\r\n\r\n\ @param\ p\ the\ other\ point\r\n\ @return\ the\ distance\ between\ the\ two\ points\r\n
comment2.params=other
comment2.target=Point(Point)
comment2.text=\r\n\ Copy\ constructor\ -\ creates\ a\ new\ Point\ with\ the\ same\ coordinates\ as\ another\ Point.\r\n\r\n\ @param\ other\ the\ Point\ to\ copy\r\n
comment3.params=
comment3.target=int\ getX()
comment3.text=\r\n\ @return\ the\ x-coordinate\r\n
comment4.params=
comment4.target=int\ getY()
comment4.text=\r\n\ @return\ the\ y-coordinate\r\n
comment5.params=num
comment5.target=void\ setX(int)
comment5.text=\r\n\ Sets\ the\ x-coordinate\ if\ the\ provided\ value\ is\ non-negative.\r\n\r\n\ @param\ num\ the\ new\ x-coordinate\r\n
comment6.params=num
comment6.target=void\ setY(int)
comment6.text=\r\n\ Sets\ the\ y-coordinate\ if\ the\ provided\ value\ is\ non-negative.\r\n\r\n\ @param\ num\ the\ new\ y-coordinate\r\n
comment7.params=other
comment7.target=boolean\ equals(Point)
comment7.text=\r\n\ Checks\ if\ two\ points\ are\ equal\ to\ each\ other.\r\n\r\n\ @param\ other\ the\ point\ to\ compare\ with\r\n\ @return\ true\ if\ this\ points\ are\ equal\ to\ each\ other.\r\n
comment8.params=other
comment8.target=boolean\ isAbove(Point)
comment8.text=\r\n\ Checks\ if\ this\ point\ is\ above\ another\ point.\r\n\r\n\ @param\ other\ the\ point\ to\ compare\ with\r\n\ @return\ true\ if\ this\ point\ is\ above\ the\ other\ point\r\n
comment9.params=other
comment9.target=boolean\ isUnder(Point)
comment9.text=\r\n\ Checks\ if\ this\ point\ is\ below\ another\ point.\r\n\r\n\ @param\ other\ the\ point\ to\ compare\ with\r\n\ @return\ true\ if\ this\ point\ is\ below\ the\ other\ point\r\n
numComments=16
